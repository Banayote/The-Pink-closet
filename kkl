            transform: rotate(270deg);
        }
        /* Quoted message preview style */
        #quote-preview {
            display: none;
            width: 100%;
            background-color: lightgray;
            padding: 10px;
            margin-bottom: 10px;
            border-left: 4px solid #d81b60;
            border-radius: 5px;
            position: relative;
            box-sizing: border-box;
        }
        #quote-preview-content {
            font-size: 14px;
            color: #555;
        }
        #quote-cancel {
            position: absolute;
            top: 5px;
            right: 10px;
            cursor: pointer;
            color: #d81b60;
        }
        .message.quote {
            border-left: 4px solid #d81b60;
            padding-left: 10px;
            margin-bottom: 5px;
        }
        .quoted-message {
            font-size: 14px;
            color: gray;
            margin-bottom: 5px;
            display: block;
        }
        /* Style for resended message in a gray box */
        .resend-message {
            background-color: lightgray;
            padding: 10px;
            border-radius: 10px;
            max-width: 70%;
            display: inline-block;
            margin: 5px 0;
            word-wrap: break-word;
            transition: transform 0.3s ease-in-out;
            position: relative;
        }
        /* Make the image/video smaller in the resend box */
        .resend-message img, .resend-message video {
            max-width: 60px;
            max-height: 60px;
            border-radius: 5px;
            cursor: pointer;
            
        }
    </style>
</head>
<body>

<div id="profile-list">
    <h2 style="color: #d81b60; text-align: center;">Select a Profile</h2>
    <span class="status-dot online"></span> <!-- Add status dot -->
</div>

<div id="chat-container" style="display: none;">
    <div id="chat-header">
        <div id="call-icons">
            <i class="fas fa-phone icon" id="call-icon"></i>
            <i class="fas fa-video icon" id="video-call-icon"></i>
        </div>
        <span id="chat-user-name"></span>
        <img src="" id="chat-avatar" alt="Avatar">
        <i class="fas fa-arrow-left" id="back-button"></i>
    </div>
    <div id="message-list"></div>

    <!-- Quoted message preview box -->
    <div id="quote-preview">
        <span id="quote-preview-content"></span>
        <span id="quote-cancel">&times;</span>
    </div>

    <div id="message-input-container">
        <div style="display: flex; width: 100%;">
            <i class="fas fa-camera" id="camera-icon"></i>
            <i class="fas fa-paperclip" id="clip-icon"></i>
            <textarea id="message-input" placeholder="Type a message..."></textarea>
        <button id="send-button" class="fas fa-paper-plane"></button>
            <button id="audio-button" class="fas fa-microphone"></button>
        </div>
    </div>
</div>
<div id="modal">
    <img id="modal-img" style="display: none;">
    <video id="modal-video" controls></video>
    <button id="modal-close">&times;</button>
</div>

<script>
    const profiles = [
        { name: "Alice", avatar: "https://randomuser.me/api/portraits/women/1.jpg" },
        { name: "Bob", avatar: "https://randomuser.me/api/portraits/men/1.jpg" },
        { name: "Charlie", avatar: "https://randomuser.me/api/portraits/men/2.jpg" },
        { name: "Daisy", avatar: "https://randomuser.me/api/portraits/women/2.jpg" }
    ];

    let chatHistory = {}; // Store individual chat histories for each user
    let activeProfile = null; // Track the current selected user
    let chatActive = false; // To track if the user is actively chatting
    let typingIndicator; // Typing notification timer
let newMessageSound = new Audio('your-notification-sound-url.mp3'); // Load a notification sound
let lastActiveProfile = null;
// Retrieve the user ID from local storage
const buyerId = localStorage.getItem('buyerId');
            if (buyerId) {
                console.log('Buyer ID retrieved in messages.html:', buyerId);
          
    alert('No buyer ID found. Please return to the main page to generate an ID.');
    window.location.href = 'index.html'; // Redirect to main page if no ID is found
}
    const profileList = document.getElementById('profile-list');
    const chatContainer = document.getElementById('chat-container');
    const chatUserName = document.getElementById('chat-user-name');
    const chatAvatar = document.getElementById('chat-avatar');
    const messageList = document.getElementById('message-list');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const audioButton = document.getElementById('audio-button');
    const modal = document.getElementById('modal');
    const modalImg = document.getElementById('modal-img');
    const modalVideo = document.getElementById('modal-video');
    const modalClose = document.getElementById('modal-close');
    const quotePreview = document.getElementById('quote-preview');
    const quotePreviewContent = document.getElementById('quote-preview-content');
    const quoteCancel = document.getElementById('quote-cancel');
    let swipedMessage = null; // Store the swiped message for sending
// Initialize Profile List
function loadProfileList() {
    profileList.innerHTML = '';
    profiles.forEach(profile => {
        const profileDiv = document.createElement('div');
        profileDiv.classList.add('profile');
        profileDiv.innerHTML = `
            <img src="${profile.avatar}" class="avatar" alt="Avatar">
            <span class="profile-name">${profile.name}</span>
            <span class="message-preview" id="preview-${profile.name}">${profile.lastMessage || ''}</span>
            ${profile.unread > 0 ? `<span class="unread-badge">${profile.unread}</span>` : ''}
        `;
        if (profile.unread > 0) {
            profileDiv.querySelector('.profile-name').classList.add('bold-name');
        }
        profileDiv.addEventListener('click', () => {
            loadChat(profile);
        });
        profileList.appendChild(profileDiv);
    });
}
    // Automatically resize the message input as the user types
    messageInput.addEventListener('input', function() {
        this.style.height = 'auto'; // Reset height
        this.style.height = (this.scrollHeight) + 'px'; // Adjust height based on scrollHeight
    });

    // Limit the width to make around 15 characters fit per line (adjust based on your styling)
    messageInput.setAttribute('maxlength', '200'); // Optional: Limit total characters to 200 or more if needed
    
    // Load profiles
    profiles.forEach(profile => {
        const profileDiv = document.createElement('div');
        profileDiv.classList.add('profile');
        profileDiv.innerHTML = `<img src="${profile.avatar}" class="avatar" alt="Avatar"><span>${profile.name}</span>`;
        profileDiv.addEventListener('click', () => {
            loadChat(profile);
        });
        profileList.appendChild(profileDiv);
    });

    // Load chat for selected user
    function loadChat(profile) {
        activeProfile = profile; // Set active profile
        chatUserName.textContent = profile.name;
        chatAvatar.src = profile.avatar;
        profileList.style.display = 'none';
        chatContainer.style.display = 'block';
        profile.unread = 0; // Reset unread count
    loadProfileList(); // Update profile list

        // Load chat history for the selected user
        messageList.innerHTML = ''; // Clear the message list
        if (chatHistory[profile.name]) {
            chatHistory[profile.name].forEach(msg => {
                displayMessage(msg);
            });
        }
        // Save messages in localStorage
function saveMessages() {
    localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
}
    }
    
    // Hide the camera icon when the user starts typing, show it when the input is empty
    messageInput.addEventListener('input', () => {
        const cameraIcon = document.getElementById('camera-icon');
        const clipIcon = document.getElementById('clip-icon');

        if (messageInput.value.trim()) {
            // If the input has text, hide the camera icon and move the clip icon
            cameraIcon.classList.add('hide-camera');
            clipIcon.classList.add('slide-clip');
        } else {
            // If the input is empty, show the camera icon and reset the clip icon
            cameraIcon.classList.remove('hide-camera');
            clipIcon.classList.remove('slide-clip');
        }
    });

    // Send a message
    sendButton.addEventListener('click', () => {
        if (messageInput.value.trim() || swipedMessage) {
            const messageContent = messageInput.value.trim();
            const message = {
                content: messageContent,
                sender: 'user', // You can add more info to differentiate user/other messages
                timestamp: new Date().toLocaleTimeString() // Optional
            };
            // Save message to the active user's chat history
            if (!chatHistory[activeProfile.name]) {
                chatHistory[activeProfile.name] = []; // Initialize if not exists
                }
        if (!chatHistory[userId][activeProfile.name]) {
            chatHistory[userId][activeProfile.name] = []; // Initialize if not exists
        }
            
            
            chatHistory[activeProfile.name].push(message); // Add message to the user's chat history
            sendMessage(messageInput.value, swipedMessage);
            
            messageInput.value = '';
            swipedMessage = null; // Clear swiped message
            hideQuotePreview();
            toggleSendButton();

            // Simulate avatar's response after 5 seconds with typing notification
            displayTypingIndicator();
            setTimeout(() => {
                avatarResponse(activeProfile);
            }, 5000);
        }
    });

    function sendMessage(content, swipedContent) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message', 'user');

        // If swiped content is provided, create a quoted message
        if (swipedContent) {
            const resendMessageDiv = document.createElement('div');
            resendMessageDiv.classList.add('resend-message');
            // If swiped content is an image or video, display it as smaller media
            if (swipedContent.querySelector('img')) {
                const swipedImg = swipedContent.querySelector('img');
                const resendImg = document.createElement('img');
                resendImg.src = swipedImg.src;
                resendImg.addEventListener('click', () => {
                    openMediaInModal(swipedImg.src, 'image'); // Open full-size image on click
                });
                resendMessageDiv.appendChild(resendImg);
            } else if (swipedContent.querySelector('video')) {
                const swipedVideo = swipedContent.querySelector('video');
                const resendVideo = document.createElement('video');
                resendVideo.src = swipedVideo.src;
                resendVideo.controls = true;
                resendVideo.addEventListener('click', () => {
                    openMediaInModal(swipedVideo.src, 'video'); // Open full-size video on click
                });
                resendMessageDiv.appendChild(resendVideo);
            } else {
                resendMessageDiv.textContent = swipedContent.textContent; // Text of the swiped message
            }
            messageDiv.appendChild(resendMessageDiv); // Append the gray box
        }

        messageDiv.appendChild(document.createTextNode(content));
        addSwipeToMessage(messageDiv);
        messageList.appendChild(messageDiv);
        messageList.scrollTop = messageList.scrollHeight; // Scroll to the bottom
    }

    // Function to simulate avatar's response
    function avatarResponse(profile) {
        removeTypingIndicator(); // Remove the typing indicator before displaying the response
        const message = {
            content: `This is an automated response from ${profile.name}.`,
            sender: 'avatar',
            timestamp: new Date().toLocaleTimeString()
        };
        chatHistory[profile.name].push(message);
        displayMessage(message);
    }

    // Display the typing indicator
    function displayTypingIndicator() {
        typingIndicator = document.createElement('div');
        typingIndicator.classList.add('message', 'typing');
        typingIndicator.innerHTML = `<span class="dot"></span><span class="dot"></span><span class="dot"></span> ${activeProfile.name} is typing...`;
        messageList.appendChild(typingIndicator);
        messageList.scrollTop = messageList.scrollHeight; // Scroll to the bottom
    }

    // Remove the typing indicator
    function removeTypingIndicator() {
        if (typingIndicator) {
            messageList.removeChild(typingIndicator);
            typingIndicator = null;
        }
    }

    // Toggle send button visibility
    messageInput.addEventListener('input', toggleSendButton);
    function toggleSendButton() {
        if (messageInput.value.trim()) {
            sendButton.classList.add('show');
            audioButton.classList.add('hide');
        } else {
            sendButton.classList.remove('show');
            audioButton.classList.remove('hide');
        }
        
    }

    // Fullscreen view for images/videos
    messageList.addEventListener('click', event => {
        if (event.target.tagName === 'IMG') {
            openMediaInModal(event.target.src, 'image');
        } else if (event.target.tagName === 'VIDEO') {
            openMediaInModal(event.target.src, 'video');
        }
    });

    function openMediaInModal(src, type) {
        modal.style.display = 'flex';
        if (type === 'image') {
            modalImg.src = src;
            modalImg.style.display = 'block';
            modalVideo.style.display = 'none';
        } else if (type === 'video') {
            modalVideo.src = src;
            modalImg.style.display = 'none';
            modalVideo.style.display = 'block';
        }
        document.addEventListener('DOMContentLoaded', () => {
    // Check if user is logged in and has a store (seller)
    function isSeller() {
        return localStorage.getItem('loggedIn') === 'true' && localStorage.getItem('storeCreated') === 'true';
    }

    // Get the buyer ID from localStorage
    function getBuyerId() {
        return localStorage.getItem('buyerId');
    }

    // Check if the user is a buyer (not logged in and not a seller)
    function isBuyer() {
        return !localStorage.getItem('loggedIn') && getBuyerId();
    }

    // Display user profile picture or buyer icon
    function displayUserIcon() {
        const userIcon = document.getElementById('userIcon');

        if (isSeller()) {
            // Load seller's profile picture (from profile page)
            const profilePicUrl = localStorage.getItem('profilePic'); // Assuming you store this
            userIcon.src = profilePicUrl || 'default-profile.png'; // Default if no picture
        } else if (isBuyer()) {
            // Display heart icon for buyers
            userIcon.src = 'heart-icon.png'; // Path to your heart icon image
        } else {
            // If neither, set a default icon (or hide)
            userIcon.src = 'default-icon.png';
        }
    }

    // Call function to display the correct user icon
    displayUserIcon();
});

    }

    modalClose.addEventListener('click', () => {
        modal.style.display = 'none';
        modalImg.src = '';
        modalVideo.src = '';
    });

    // Swipe to resend functionality - WhatsApp style
    function addSwipeToMessage(messageDiv) {
        let startX = 0;
        let swiped = false;

        messageDiv.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            messageDiv.style.transition = 'transform 0s'; // Remove transition during swipe
        });

        messageDiv.addEventListener('touchmove', (e) => {
            const touch = e.touches[0];
            const diffX = touch.clientX - startX;
            if (diffX > 50) {
                swiped = true;
                // Move the message with the finger
                const offset = diffX > 0 ? diffX : 0;
                messageDiv.style.transform = `translateX(${offset}px)`;
            }
        });

        messageDiv.addEventListener('touchend', () => {
            if (swiped) {
                swipedMessage = messageDiv; // Store the swiped message

                // Display swiped message in the preview
                quotePreview.style.display = 'block';
                quotePreviewContent.textContent = messageDiv.textContent;
                messageInput.classList.add('active'); // Add active class to increase height
                messageDiv.style.transition = 'transform 0.3s ease'; // Smooth return animation
                messageDiv.style.transform = ''; // Reset transformation after swipe
            }
        });

        // Reset on touch cancel
        messageDiv.addEventListener('touchcancel', () => {
            messageDiv.style.transform = '';
        });
    }

    // Cancel swipe action
    quoteCancel.addEventListener('click', () => {
        hideQuotePreview();
        swipedMessage = null; // Clear swiped message
    });

    function hideQuotePreview() {
        quotePreview.style.display = 'none';
        quotePreviewContent.textContent = '';
        messageInput.classList.remove('active');
    }

    // Back button functionality
    document.getElementById('back-button').addEventListener('click', () => {
        chatContainer.style.display = 'none';
        profileList.style.display = 'block';
    });

    // Camera functionality (for sending images)
    document.getElementById('camera-icon').addEventListener('click', () => {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.onchange = e => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    sendMedia(event.target.result, 'image'); // Send image directly
                };
                reader.readAsDataURL(file); // Read file as Data URL
            }
        };
        input.click();
    });

    // Clip functionality (for sending videos)
    document.getElementById('clip-icon').addEventListener('click', () => {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'video/*'; // Accept video files
        input.onchange = e => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    sendMedia(event.target.result, 'video'); // Send video directly
                };
                reader.readAsDataURL(file); // Read file as Data URL
            }
        };
        input.click();
    });

    // Send image/video in the chat
    function sendMedia(src, type) {
        const mediaMessageDiv = document.createElement('div');
        mediaMessageDiv.classList.add('message', 'user');

        if (type === 'image') {
            const img = document.createElement('img');
            img.src = src;
            mediaMessageDiv.appendChild(img);
        } else if (type === 'video') {
            const video = document.createElement('video');
            video.src = src;
            video.controls = true;
            mediaMessageDiv.appendChild(video);
        }

        addSwipeToMessage(mediaMessageDiv); // Add swipe functionality
        messageList.appendChild(mediaMessageDiv);
        messageList.scrollTop = messageList.scrollHeight;
    }

    // CSS classes for hiding and sliding icons
    document.styleSheets[0].insertRule(`
        .hide-camera {
            transform: translateX(-30px);
            opacity: 0;
        }
    `, document.styleSheets[0].cssRules.length);

    document.styleSheets[0].insertRule(`
        .slide-clip {
            transform: translateX(-30px);
        }
    `, document.styleSheets[0].cssRules.length);
</script>

